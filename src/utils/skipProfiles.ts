import { getChannelIDInfo, getVideoID } from "../../maze-utils/src/video";
import Config from "../config";
import { SponsorHideType, SponsorTime } from "../types";

let currentTabSkipProfile: string | null = null;

export function getSkipProfileIDForTime(): string | null {
    const temp = Config.local!.skipProfileTemp;
    if (temp !== null && temp.time > Date.now() - 60 * 60 * 1000) {
        return temp.configID;
    } else {
        return null;
    }
}

export function getSkipProfileIDForTab(): string | null {
    return currentTabSkipProfile;
}

export function setCurrentTabSkipProfile(configID: string | null) {
    currentTabSkipProfile = configID ?? null;
}

export function getSkipProfileIDForVideo(): string | null {
    return Config.local!.channelSkipProfileIDs[getVideoID()] ?? null;
}

export function getSkipProfileIDForChannel(): string | null {
    const channelInfo = getChannelIDInfo();
    if (!channelInfo) {
        return null;
    }

    return Config.local!.channelSkipProfileIDs[channelInfo.id]
        ?? Config.local!.channelSkipProfileIDs[channelInfo.author]
        ?? null;
}

export function getSkipProfileID(): string | null {
    const configID =
        getSkipProfileIDForTime()
        ?? getSkipProfileIDForTab()
        ?? getSkipProfileIDForVideo()
        ?? getSkipProfileIDForChannel();

    return configID ?? null;
}

export function getSkipProfile(): Record<string, unknown> | null {
    const configID = getSkipProfileID();
    if (configID) {
        return Config.local!.skipProfiles[configID] as Record<string, unknown>;
    }

    return null;
}

type SkipProfileBoolKey =
    | "showAutogeneratedChapters"
    | "autoSkipOnMusicVideos"
    | "skipNonMusicOnlyOnYoutubeMusic"
    | "muteSegments"
    | "fullVideoSegments"
    | "manualSkipOnFullVideo";

export function getSkipProfileBool(key: SkipProfileBoolKey): boolean {
    return getSkipProfileValue<boolean>(key);
}

export function getSkipProfileNum(key: "minDuration"): number {
    return getSkipProfileValue<number>(key);
}

export function getSkipProfileValue<T>(key: string): T {
    const profile = getSkipProfile();
    if (profile && (profile as any)[key] !== null) {
        return (profile as any)[key] as T;
    }
    return (Config.config as any)[key] as T;
}

export function hideTooShortSegments(sponsorTimes: SponsorTime[]) {
    const minDuration = getSkipProfileNum("minDuration");
    if (minDuration !== 0) {
        for (const segment of sponsorTimes) {
            const duration = segment.segment[1] - segment.segment[0];
            if (duration > 0 && duration < minDuration) {
                segment.hidden = SponsorHideType.MinimumDuration;
            } else if (segment.hidden === SponsorHideType.MinimumDuration) {
                segment.hidden = SponsorHideType.Visible;
            }
        }
    }
}
